CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

PROJECT(vkvg VERSION 0.1.0 DESCRIPTION "Vulkan Vector Graphic")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
SET(CMAKE_CXX_FLAGS "-W -Wall")
SET(CMAKE_EXE_LINKER_FLAGS "-lm")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug)
ENDIF()
MESSAGE(STATUS "${CMAKE_BUILD_TYPE} build.")

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	ADD_DEFINITIONS (-DDEBUG)
ENDIF()

set(VULKAN_SDK "$ENV{VULKAN_SDK}" CACHE STRING "LunarG Vulkan SDK path")
if (VULKAN_SDK)
		set(ENV{VULKAN_SDK} ${VULKAN_SDK})
endif ()
SET(ENV{VK_LAYER_PATH} "${VULKAN_SDK}/etc/explicit_layer.d")

MESSAGE(STATUS "VULKAN_SDK = $ENV{VULKAN_SDK}")
MESSAGE(STATUS "VK_LAYER_PATH = $ENV{VK_LAYER_PATH}")

add_subdirectory (vkh)

#be aware that system libraries have priority on SDK in the finding.
FIND_PACKAGE(Vulkan REQUIRED)
FIND_PACKAGE(GLFW3)
FIND_PACKAGE(Freetype REQUIRED)
FIND_PACKAGE(FontConfig REQUIRED)

INCLUDE(FindPkgConfig)
INCLUDE(GNUInstallDirs)

PKG_CHECK_MODULES(PC_HARFBUZZ harfbuzz>=0.9.0)

FIND_PATH(HARFBUZZ_INCLUDE_DIRS NAMES hb.h
  HINTS ${PC_HARFBUZZ_INCLUDE_DIRS} ${PC_HARFBUZZ_INCLUDEDIR}
)

FIND_LIBRARY(HARFBUZZ_LIBRARIES NAMES harfbuzz
  HINTS ${PC_HARFBUZZ_LIBRARY_DIRS} ${PC_HARFBUZZ_LIBDIR}
)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(HarfBuzz DEFAULT_MSG HARFBUZZ_INCLUDE_DIRS HARFBUZZ_LIBRARIES)

# Find glslc shader compiler.
# On Android, the NDK includes the binary, so no external dependency.
if(ANDROID)
	file(GLOB glslc-folders ${ANDROID_NDK}/shader-tools/*)
else()
	file(GLOB glslc-folders ${VULKAN_SDK}/bin)
endif()
FIND_PROGRAM(GLSLC glslc HINTS ${glslc-folders})
FIND_PROGRAM(XXD xxd)

if(GLSLC AND XXD)

	SET(SHADERS_H "${CMAKE_CURRENT_SOURCE_DIR}/src/shaders.h")
	SET(SHADER_DIR "shaders")
	SET(SHADER_FILES ${SHADER_DIR}/*.frag ${SHADER_DIR}/*.vert ${SHADER_DIR}/*.geom  ${SHADER_DIR}/*.comp)
	FILE(GLOB_RECURSE SHADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${SHADER_FILES})
	FOREACH(SHADER ${SHADERS})
		SET(shader-input ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER})
		SET(shader-output ${CMAKE_CURRENT_BINARY_DIR}/${SHADER}.spv)
		ADD_CUSTOM_COMMAND (
		  OUTPUT ${shader-output}
		  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}"
		  COMMAND ${GLSLC} ${shader-input} -o ${shader-output}
		  COMMENT "Compiling ${shader-input}"
		  DEPENDS ${SHADER}
		  VERBATIM
		)
		SET(SHADER_OUTPUTS ${SHADER_OUTPUTS} ${shader-output})
	ENDFOREACH()

	ADD_CUSTOM_TARGET(BuildShaderHeader ALL DEPENDS ${SHADER_OUTPUTS})

	ADD_CUSTOM_COMMAND (TARGET BuildShaderHeader
		POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E remove ${SHADERS_H}
		VERBATIM
	)

	FOREACH(shad_spv ${SHADER_OUTPUTS})
		GET_FILENAME_COMPONENT(SPV ${shad_spv} NAME)
		ADD_CUSTOM_COMMAND (TARGET BuildShaderHeader
			POST_BUILD
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}
			COMMAND xxd -i ${SPV} >> ${SHADERS_H}
			DEPENDS ${SHADERS_H}
		)
	ENDFOREACH()
	SET_SOURCE_FILES_PROPERTIES(${SHADERS_H} PROPERTIES GENERATED 1)
	#add_definitions( -DDEBUG_VK_PERF=true )
endif()

FILE(GLOB VKVG_SRC src/*.c)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${VKVG_SRC} ${SHADERS})

if (BuildShaderHeader)
	add_dependencies(${PROJECT_NAME} BuildShaderHeader)
endif ()

SET_TARGET_PROPERTIES(vkvg PROPERTIES
	VERSION ${PROJECT_VERSION}
	SOVERSION 1
	PUBLIC_HEADER include/vkvg.h
)

TARGET_INCLUDE_DIRECTORIES(vkvg PRIVATE
	${Vulkan_INCLUDE_DIRS}
	${FREETYPE_INCLUDE_DIRS}
	${HARFBUZZ_INCLUDE_DIRS}
	${FONTCONFIG_INCLUDE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/include
	${CMAKE_CURRENT_SOURCE_DIR}/src
	${CMAKE_CURRENT_SOURCE_DIR}/vkh/include
	${CMAKE_CURRENT_SOURCE_DIR}/vkh/src
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
	${Vulkan_LIBRARIES}
	${FREETYPE_LIBRARY}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
	vkh_static
)

CONFIGURE_FILE(vkvg.pc.in vkvg.pc @ONLY)
INSTALL(FILES ${CMAKE_BINARY_DIR}/vkvg.pc DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig)
INSTALL(TARGETS vkvg
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

if (GLFW3_FOUND)
	#build test app
	ADD_EXECUTABLE(${PROJECT_NAME}_test tests/test1.c tests/vkengine.c)
	TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_test PRIVATE
		${Vulkan_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}/include
		${CMAKE_CURRENT_SOURCE_DIR}/src
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/include
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/src
	)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}_test
		${Vulkan_LIBRARIES}
		${GLFW3_LIBRARY}
		vkh_static
		vkvg
	)
endif ()
